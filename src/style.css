.prosemirror-flat-list {
  & {
    padding: 0;
    margin-top: 0;
    margin-bottom: 0;
    margin-left: 32px;
    margin-bottom: 0;

    position: relative;
    display: list-item;
    list-style: none;
  }

  &[data-list-type='bullet'] {
    list-style: disc;
  }

  &[data-list-type='ordered'] {
    counter-reset: prosemirror-flat-list-counter;
    counter-increment: prosemirror-flat-list-counter;
    & + & {
      counter-reset: none;
    }
    &::marker {
      content: counter(prosemirror-flat-list-counter, decimal) '. ';
    }
  }

  &[data-list-type='task'] {
    & > .list-marker {
      position: absolute;
      right: 100%;
      white-space: pre;
      cursor: pointer;

      /* Add a suffix after the marker, just like how bullet and ordered list do */
      &::after {
        content: ' ';
      }

      & * {
        pointer-events: none;
      }
    }
  }

  &[data-list-type='toggle'] {
    & > .list-marker {
      position: absolute;
      right: 100%;
      white-space: pre;
      font-size: 1.2em;
      font-weight: 600;
    }

    /*
    https://www.w3.org/TR/css-counter-styles-3/#disclosure-open 

    For example, the disclosure-closed style might use the characters U+25B8
    BLACK RIGHT-POINTING SMALL TRIANGLE (▸) and U+25C2 BLACK LEFT-POINTING
    SMALL TRIANGLE (◂), while the disclosure-open style might use the
    character U+25BE BLACK DOWN-POINTING SMALL TRIANGLE (▾).
    */
    &:not([data-list-collapsed]) > .list-marker::after {
      content: '▾ ';
    }
    &[data-list-collapsed] > .list-marker::after {
      content: '▸ ';
    }

    /* The list node has only one child */
    &:not(:has(> .list-content > *:nth-child(n + 2))) {
      /* Make the marker gray */
      & > .list-marker {
        opacity: 40%;
      }

      /* Always show to down triangle */
      & > .list-marker::after {
        content: '▾ ';
      }
    }

    /* The list node has two or more children */
    &:has(> .list-content > *:nth-child(n + 2)) {
      /* Make the marker clickable */
      & > .list-marker {
        cursor: pointer;
      }

      /* If collapsed, hide the second and futher children */
      &[data-list-collapsed] > .list-content > *:nth-child(n + 2) {
        display: none;
      }
    }
  }
}
